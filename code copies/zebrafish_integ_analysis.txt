import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from matplotlib.lines import Line2D




class HeadOrientationAnalysis:
    def __init__(self, file_path):
        self.df = pd.read_csv(file_path)

    def calculate_angle(self, point1, point2, point3, point4):
        vec1 = np.array(point1) - np.array(point2)
        vec2 = np.array(point3) - np.array(point4)
        dot_product = np.dot(vec1, vec2)
        magnitude = np.linalg.norm(vec1) * np.linalg.norm(vec2)
        angle_rad = np.arccos(dot_product / magnitude)
        angle_deg = np.degrees(angle_rad)
        return angle_deg

    def analyze(self):
        x_fixed = self.df.iloc[2:, 1].astype(float)
        y_fixed = self.df.iloc[2:, 2].astype(float)
        x_hor = self.df.iloc[2:, 16].astype(float)
        y_hor = self.df.iloc[2:, 17].astype(float)
        x_head = self.df.iloc[2:, 4].astype(float)
        y_head = self.df.iloc[2:, 5].astype(float)
        x_body = self.df.iloc[2:, 7].astype(float)
        y_body = self.df.iloc[2:, 8].astype(float)

        point1 = list(zip(x_fixed, y_fixed))
        point2 = list(zip(x_hor, y_hor))
        point3 = list(zip(x_head, y_head))
        point4 = list(zip(x_body, y_body))

        angles1 = []
        angles2 = []

        threshold = 700

        for p1, p2, p3, p4 in zip(point1, point2, point3, point4):
            dist = np.linalg.norm(np.array(p1) - np.array(p3))
            if dist > threshold:
                angles2.append(self.calculate_angle(p1, p2, p3, p4))
            else:
                angles1.append(self.calculate_angle(p1, p2, p3, p4))

        n_bins = 40
        bins = np.linspace(0, 2 * np.pi, n_bins, endpoint=True)

        hist1, _ = np.histogram(angles1, bins=bins)
        hist2, _ = np.histogram(angles2, bins=bins)

        fig, axs = plt.subplots(1, 2, subplot_kw={'projection': 'polar'})

        axs[0].bar(bins[:-1], hist1, width=(bins[1] - bins[0]), bottom=0.0, color='black')
        axs[0].set_yticklabels([])
        axs[0].set_title('Zebrafish in SC')

        axs[1].bar(bins[:-1], hist2, width=(bins[1] - bins[0]), bottom=0.0, color='red')
        axs[1].set_yticklabels([])
        axs[1].set_title('Zebrafish in NSC')

        max_val = max(hist1.max(), hist2.max())
        for ax in axs:
            ax.set_ylim(0, max_val)

        fig.subplots_adjust(wspace=0.5)

        plt.show()

class TailMotionAnalysis:
    def __init__(self, file_path):
        self.df = pd.read_csv(file_path)

    def calculate_angle(self, point1, point2, point3, point4):
        vec1 = np.array(point1) - np.array(point2)
        vec2 = np.array(point3) - np.array(point4)
        dot_product = np.dot(vec1, vec2)
        magnitude = np.linalg.norm(vec1) * np.linalg.norm(vec2)
        angle_rad = np.arccos(dot_product / magnitude)
        angle_deg = np.degrees(angle_rad)
        return angle_deg

    def analyze(self):
        x_fixed = self.df.iloc[2:, 1].astype(float)
        y_fixed = self.df.iloc[2:, 2].astype(float)
        x_hor   = self.df.iloc[2:, 16].astype(float)
        y_hor   = self.df.iloc[2:, 17].astype(float)
        x_head  = self.df.iloc[2:, 4].astype(float)
        y_head  = self.df.iloc[2:, 5].astype(float)
        x_body  = self.df.iloc[2:, 7].astype(float)
        y_body  = self.df.iloc[2:, 8].astype(float)
        x_tail  = self.df.iloc[2:, 10].astype(float)
        y_tail  = self.df.iloc[2:, 11].astype(float)
        x_tailend = self.df.iloc[2:, 13].astype(float)
        y_tailend = self.df.iloc[2:, 14].astype(float)

        point1 = list(zip(x_fixed, y_fixed))
        point2 = list(zip(x_hor, y_hor))
        point3 = list(zip(x_head, y_head))
        point4 = list(zip(x_body, y_body))
        point5 = list(zip(x_tail, y_tail))
        point6 = list(zip(x_tailend, y_tailend))

        angles = []
        xaxis = []
        colors = []

        threshold = 500

        for i, (p1, p2, p3, p4, p5, p6) in enumerate(zip(point1, point2, point3, point4, point5, point6)):
            dist = np.linalg.norm(np.array(p1) - np.array(p3))
            if dist > threshold:
                angles.append(self.calculate_angle(p3, p4, p5, p6))
                xaxis.append(i)
                colors.append('red')
            else:
                angles.append(self.calculate_angle(p3, p4, p5, p6))
                xaxis.append(i)
                colors.append('black')

        periods = 1   # To which previous frame you want the current frame to be compared

        angles_diff = pd.Series(angles).diff(periods=periods)

        
        plt.figure(figsize=(10, 6))
        plt.title('Tail motion')
        plt.scatter(xaxis, angles_diff, c=colors, s=7)

        plt.xlabel('Frames')
        plt.ylabel(r'$\Delta\theta$ compared to previous frame')
        deg_format = FuncFormatter(lambda x, _: '{:g}Â°'.format(x))
        plt.gca().yaxis.set_major_formatter(deg_format)

        handles = [Line2D([0], [0], color=c, marker='o', markersize=7, linestyle='') for c in ['black', 'red']]
        labels = ['Zebrafish in SC', 'Zebrafish in NSC']
        plt.legend(handles, labels, loc='upper left')

        plt.show()

if __name__ == "__main__":
    head_analysis = HeadOrientationAnalysis('pred_coords_35_mod.csv')
    head_analysis.analyze()

    tail_analysis = TailMotionAnalysis('pred_coords_35_mod.csv')
    tail_analysis.analyze()
